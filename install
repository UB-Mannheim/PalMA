#!/usr/bin/env python3

import argparse
import glob
import os
import pwd
import re
import shutil
import socket
import subprocess
import sys

################################################################################
## command line parsing
################################################################################
parser = argparse.ArgumentParser(
    description='Configure script for PalMA',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument('--prefix', default='/usr', help='set install prefix')
parser.add_argument('--sysconfdir', default='/etc', help='set sysconfdir')
parser.add_argument('--libdir', default=argparse.SUPPRESS,
                    help='set lib directory explicitly (default: PREFIX/lib/palma)')
parser.add_argument('--wwwdir', default=argparse.SUPPRESS,
                    help='set www root directory explicitly (default: PREFIX/share/palma)')

parser.add_argument('--browser', default='chromium',
                    choices=[ 'chromium', 'chromium-browser', 'midori' ],
                    help='set browser')
parser.add_argument('--dbdir', default='/var/lib/palma',
                    help='set database directory')
parser.add_argument('--no-deps', action='store_false', dest='deps',
                    help='install dependencies')
parser.add_argument('--init', choices=['sysvinit','systemd'], default='systemd',
                    help='set init system for start script')
parser.add_argument('--name', default=argparse.SUPPRESS,
                    help='set host name (default: %s)' % socket.getfqdn())
parser.add_argument('--server', choices=['apache2','nginx'], default='nginx',
                    help='set web server')
parser.add_argument('-f', '--force', action='store_true',
                    help='force action (e.g. uninstall all files)')
parser.add_argument('-v', '--verbose', action='store_true',
                    help='set verbose output')
parser.add_argument('mode', nargs='?', choices=['install','deb', 'deps', 'uninstall'],
                    default='install', help='run mode')
args = parser.parse_args()

################################################################################
## lists of files and dependencies
################################################################################
deps_debian = [
    'feh', 'libreoffice', 'ssvnc', 'vlc', 'x11vnc', 'zathura',
    'wmctrl', 'xdotool', 'openbox', 'sqlite3', 'unclutter',
    'php', 'php-cgi', 'php-cli', 'php-curl', 'php-fpm',
    'php-gd', 'php-intl', 'php-sqlite3', 'php-mbstring',
    'gettext', 'git', 'libavcodec-extra', 'make', 'wget', 'xorg',
]

files_wwwdir = [
    # php
    'auth.php', 'control.php', 'DBConnector.class.php', 'db.php', 'do_logout_all.php',
    'download.php', 'FileHandler.class.php', 'globals.php', 'i12n.php', 'index.php',
    'login.php', 'logout.php', 'SSVNCDaemon.class.php', 'start_ssvnc.php', 'upload.php',
    # css
    'dropzone.min.css',
    'palma.css',
    'pure-min.css',
    # js
    'dropzone.min.js',
    'jquery.min.js',
]

dirs_wwwdir = [
    'font-awesome', 'images', 'locale', 'php-gettext', 'qrcode', 'settings',
    'theme',
]

pkgs_server = {
    'nginx':  [ 'nginx-light' ],
    'apache': [ 'apache2', 'libapache2-mod-php' ],
}

################################################################################
## helper functions for configuration file creation
################################################################################
def makedeb_version():
    lastcommit = check_output(
        ['/usr/bin/git', 'log', '--pretty=format:%h', '-n', '1'])
    curvers = check_output(
        ['/usr/bin/git', 'tag', '--contains', lastcommit])
    if not len(curvers):
        lastvers = check_output(
            ['/usr/bin/git', 'tag']).strip().split(b'\n').pop()
        lastvers = lastvers.replace(b'v',b'')
        curvers = "%s+%s" % (lastvers,lastcommit)
    return curvers

################################################################################
## helper functions
################################################################################
def printv(*a):
    if args.verbose:
        print(" ".join(map(str,a)), file=sys.stderr)

def printe(*a):
    print(" ".join(map(str,a)), file=sys.stderr)

def mkdir(d):
    if not os.path.exists(d):
        os.makedirs(d)

def snr(pattern,f):
    subprocess.check_call(['/bin/sed', '-i', pattern, f])

def uninstall(root, files=[], dirs=[], deleteRoot=True):
    for f in map(lambda x: os.path.join(root, x), files):
        if os.path.exists(f):
            printv(f'Removing {f}')
            os.remove(f)
    for d in map(lambda x: os.path.join(root, x), dirs):
        if os.path.exists(d):
            printv(f'Recursively deleting {d}')
            shutil.rmtree(d)
    if deleteRoot and os.path.exists(root):
        if len(os.listdir(root)):
            printv(f'{root} not empty, not removing')
        else:
            printv(f'Removing {root}')
            os.rmdir(root)

def php_version(method=None):
    methods = {
        'apache2': '/etc/apache2/mods-available/php*.conf',
        'fpm': '/run/php/php*-fpm.pid',
    }

    if method and method not in methods:
        printe(f'php version lookup for {method} is not supported!')
        sys.exit(1)

    for m, pattern in methods.items():
        if method and m != method:
            continue
        results = glob.glob(pattern)
        if len(results) > 1:
            print(f"Ambiguous result for method {m}: {','.join(results)}")
        elif len(results) == 0:
            continue
        mo = re.search(r'\d\.\d', os.path.basename(results[0]))
        if mo:
            phpversion = mo[0]

    if not len(phpversion):
        printe(f"Could not determine php version, is {methods[method]} installed? Exiting")
        sys.exit(1)
    return phpversion

################################################################################
## start of script
################################################################################
if 'libdir' not in vars(args):
    vars(args)['libdir'] = os.path.join(args.prefix,'lib','palma')
if 'wwwdir' not in vars(args):
    vars(args)['wwwdir'] = os.path.join(args.prefix,'share','palma')

if args.verbose:
    printv("Settings summary:")
    for k,v in sorted(args.__dict__.items()):
        printv("  %10s: %s" % (k,repr(v)))

if args.mode == 'deps':
    print(" ".join(deps_debian + [args.browser] + pkgs_server[args.server]))
    sys.exit(0)

try:
    destdir = ''
    if args.mode == 'deb':
        destdir = os.getenv('DESTDIR', 'build-deb')
        printv("Creating debian package in '%s'" % destdir)

    if args.mode == 'install' and args.deps:
        # install dependencies
        if os.path.exists('/usr/bin/apt-get'):
            try:
                subprocess.check_call(['/usr/bin/apt-get', 'install',
                            '-y', '--no-install-recommends']
                           + deps_debian + [ args.browser ]
                           + pkgs_server[args.server])
            except Exception:
                printe('Error installing dependencies, exiting.')
                if args.verbose: raise
                sys.exit(1)

    if args.mode in ['install', 'uninstall']:
        # stop palma if already installed
        if args.init == 'systemd':
            if os.path.exists('/bin/systemctl') and \
               subprocess.call(
                   ['/bin/systemctl', 'is-active', 'palma'],
                   stdout=subprocess.DEVNULL
               ) == 0:
                printv("Stopping systemd service")
                subprocess.call(['/bin/systemctl', 'stop', 'palma'])

    # build localization files
    subprocess.check_call(['/usr/bin/make'])

    # copy files
    userstruct = pwd.getpwnam('www-data')

    wwwdir = destdir + args.wwwdir
    if args.mode == 'uninstall':
        uninstall(wwwdir, files_wwwdir, dirs_wwwdir)
    else:
        mkdir(wwwdir)
        for f in files_wwwdir:
            printv(f'Copying {f}')
            shutil.copy(f,wwwdir)
        for d in dirs_wwwdir:
            printv(f'Copying directory {d}')
            trg = os.path.join(wwwdir,d)
            if os.path.exists(trg): shutil.rmtree(trg)
            shutil.copytree(d,trg,symlinks=True)

    # palma.ini
    sysconfdir = destdir + args.sysconfdir
    palma_ini = os.path.join(sysconfdir, 'palma.ini')
    if args.mode == 'uninstall':
        for f in [ palma_ini, palma_ini + '.dist' ]:
            if os.path.exists(f) and args.force:
                os.remove(f)
    else:
        mkdir(sysconfdir)
        snr("s,'palma.ini','%s',g" % os.path.join(args.sysconfdir,'palma.ini'),
            os.path.join(wwwdir,'globals.php'))
        if args.mode == 'install':
            if os.path.exists(palma_ini):
                print("Not overwriting existing palma.ini")
                palma_ini += '.dist'
        shutil.copy('examples/palma.ini', palma_ini)

    # palma.db
    dbdir = destdir + args.dbdir
    if args.mode == 'uninstall':
        if os.path.exists(dbdir):
            shutil.rmtree(dbdir)
    else:
        mkdir(dbdir)
        snr('s,palma.db,%s,g' % os.path.join(args.dbdir,'palma.db'),
            os.path.join(wwwdir,'DBConnector.class.php'))
        if args.mode == 'install':
            os.chown(dbdir,userstruct.pw_uid,userstruct.pw_gid)

    # configure web server
    if args.mode == 'uninstall':
        if args.server == 'nginx':
            phpversion = php_version('fpm')
            if os.path.exists(os.path.join(
                    args.sysconfdir,
                    f'php/{phpversion}/mods-available/palma.ini'
            )):
                subprocess.call(['/usr/sbin/phpdismod', 'palma'])
            subprocess.call(
                ['/bin/systemctl', 'restart', 'php%s-fpm' % phpversion]
            )
            for (subdir, f) in [
                    (f'php/{phpversion}/mods-available', 'palma.ini'),
                    (f'nginx/sites-enabled', 'palma'),
                    (f'nginx/sites-available', 'palma'),
            ]:
                uninstall(os.path.join(args.sysconfdir, subdir), [f], deleteRoot=False)
            subprocess.call(['/bin/systemctl', 'restart', 'nginx'])
        else:
            pass
    else:
        if args.mode == 'deb' or args.server == 'nginx':
            phpversion = php_version('fpm')
            if args.mode == 'install':
                printv("Creating configuration for nginx")

                path = os.path.join(args.sysconfdir,
                                    'php/%s/mods-available' % phpversion)
                if not os.path.exists(path):
                    os.makedirs(path)
                fn = os.path.join(path,'palma.ini')
                shutil.copyfile('examples/palma.php.ini', fn)
                path = os.path.join(args.sysconfdir,
                                    'nginx/sites-available')
                if not os.path.exists(path):
                    os.makedirs(path)
                fn = os.path.join(path,'palma')
                shutil.copyfile('examples/palma.nginx.conf',fn)
                snr('s,/var/www/html,%s,g' % args.wwwdir, fn)
                snr('s,php7\.[0-9],php%s,g' % phpversion, fn)
                subprocess.call(['/usr/sbin/phpenmod', 'palma'])
                subprocess.call(
                    ['/bin/systemctl', 'restart', 'php%s-fpm' % phpversion]
                )

                path = os.path.join(args.sysconfdir,'nginx/sites-enabled')
                if not os.path.exists(path):
                    os.makedirs(path)
                fn = os.path.join(path,'palma')
                if not os.path.exists(fn):
                    os.symlink('../sites-available/palma', fn)
                fn = os.path.join(path,'default')
                if os.path.exists(fn):
                    os.remove(fn)
                printv("Reloading nginx configuration")
                subprocess.call(['/bin/systemctl', 'restart', 'nginx'])
        if args.mode == 'deb' or args.server == 'apache':
            printv("Creating configuration for apache2")

            path = os.path.join(destdir + args.sysconfdir,'apache2/conf-available')
            if not os.path.exists(path):
                os.makedirs(path)
            fn = os.path.join(path,'palma.conf')
            shutil.copyfile('examples/palma.apache.conf', fn)
            snr('s,/var/www/html,%s,g' % args.wwwdir, fn)

            if args.mode == 'install':
                phpversion = php_version('apache2')
                path = os.path.join(args.sysconfdir,
                                    'php/%s/apache2/conf.d' % phpversion)
                if not os.path.exists(path):
                    os.makedirs(path)
                fn = os.path.join(path,'palma.ini')
                shutil.copyfile('examples/palma.php.ini', fn)

                printv("Reloading apache2 configuration")
                subprocess.check_call(['/usr/sbin/a2enmod', 'rewrite'])
                subprocess.check_call(['/usr/sbin/a2enconf', 'palma'])
                subprocess.check_call(['/usr/sbin/apache2ctl', 'configtest'])
                subprocess.call(['/usr/sbin/apache2ctl', 'restart'])

    libdir = destdir + args.libdir
    palma_scripts = ['palma-browser', 'startx']
    if args.mode == 'uninstall':
        uninstall(libdir, palma_scripts)
    else:
        mkdir(libdir)
        for f in palma_scripts:
            shutil.copy(os.path.join('scripts/', f),libdir)

    # syslog configuration
    path = os.path.join(destdir + args.sysconfdir,'rsyslog.d')
    if args.mode == 'uninstall':
        uninstall(path, ['palma.conf'])
    else:
        mkdir(path)
        shutil.copyfile('examples/palma.syslog', os.path.join(path,'palma.conf'))
        if args.mode == 'install':
            if os.path.exists('/bin/systemctl'):
                subprocess.call(['/bin/systemctl', 'restart', 'rsyslog'])

    # init script
    path = os.path.join(destdir + args.sysconfdir, 'systemd/system')
    if args.mode == 'uninstall':
        subprocess.call(['/bin/systemctl', 'stop', 'palma'], stderr=subprocess.DEVNULL)
        subprocess.call(['/bin/systemctl', 'disable', 'palma'], stderr=subprocess.DEVNULL)
        uninstall(path, ['palma.service'], deleteRoot=False)
        subprocess.call(['/bin/systemctl', 'daemon-reload'])
    else:
        if args.init == 'systemd':
            systemd_service = os.path.join(path, 'palma.service')
            printv('Installing systemd service')
            mkdir(os.path.dirname(systemd_service))
            shutil.copyfile('examples/palma.service', systemd_service)
            snr('s,^\\(ExecStart\\)=.*,\\1=%s,g' % os.path.join(args.libdir,'startx'), systemd_service)
            snr('s,^\\(WorkingDirectory\\)=.*,\\1=%s,g' % args.wwwdir, systemd_service)
            snr('s,^\\(Group\\)=.*,\\1=www-data,g', systemd_service)

            if args.mode == 'install':
                if os.path.exists('/bin/systemctl'):
                    subprocess.call(['/bin/systemctl', 'daemon-reload'])
                    subprocess.call(['/bin/systemctl', 'enable', 'palma'], stderr=subprocess.DEVNULL)
                    subprocess.call(['/bin/systemctl', 'restart', 'palma'])
        else:
            pass

except Exception:
    printe('Error installing PalMA, exiting.')
    if args.verbose: raise
    sys.exit(1)
except KeyboardInterrupt:
    sys.exit(0)
